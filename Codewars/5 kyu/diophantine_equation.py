# https://www.codewars.com/kata/554f76dca89983cc400000bb/python
# В математике диофантово уравнение - полиномиальное уравнение, обычно с двумя или более неизвестными,
# такое, что только целочисленные решения ищутся или изучаются.
# В этой кате мы хотим найти все целочисленные x >= 0, y >= 0 решения диофантова уравнения следующего вида:
# x^2 - 4 * y^2 = n
# (в котором неизвестные - x и y, а n - наперёд заданное положительное число) в порядке убывания положительных xi.
#
# Если решений нет, то верните [] или "[]" или "".
# Подсказка: x^2 - 4 * y^2 = (x - 2*y) * (x + 2*y)


def diophantine_equation(n):
    # Создаём пустой список, в который будем добавлять ответы.
    ans_lst = []
    # Идея в том, что n = (x - 2*y) * (x + 2*y) т.е. n можно представить в виде двух множителей.
    # Значит найдём все пары целочисленных множителей, дающих искомое число.
    # Для этого переберём все числа от 1 до sqrt(n)
    for i in range(1, int(n ** .5) + 1):
        # Если данное число делит n нацело и при этом разность получающейся пары множителей даёт 4 в остатке
        # ((x + 2*y - x - (- 2*y)) = 4*y, где y - целое число)
        if n % i == 0 and ((((n // i) - i) % 4) == 0):
            # y = (x + 2*y) - (x - 2*y) / 4
            y = ((n // i) - i) // 4
            # x = n // (x - 2*y) - 2*y
            x = n // i - 2 * y
            # Добавляем ответ в список
            ans_lst.append([x, y])
    # Возвращаем полученный список
    # (Если ни один ответ не подходит, то вернётся пустой список [])
    return ans_lst

# Другие гениальные решения:
# import math
# def sol_equation(n):
#     res = []
#     for i in range(1, int(math.sqrt(n)) + 1):          - один из вариантов нахождения корня, не отличается
#         if n % i == 0:
#             j = n // i                                 - да, можно выделить память для этой переменной
#                                                        - чтобы повысить читабельность, я думал об этом.
#             if (i + j) % 2 == 0 and (j - i) % 4 == 0:  - ах да, я совсем забыл, что второе условие на сумму
#                                                        - тоже может ограничить множество ответов.
#                 x = (i + j) // 2
#                 y = (j - i) // 4                       - ладно, согласен, так красивее выглядит.
#                 res.append([x, y])
#
#     return res
