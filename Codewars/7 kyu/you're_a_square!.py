# https://www.codewars.com/kata/54c27a33fb7da0db0100040e/python
# Вам нравятся строительные блоки. Особенно Вам нравятся квадратные строительные блоки.
# А что Вам нравится ещё больше, так это выстраивать их в квадрат из квадратных строительных блоков!
# Тем не менее, иногда, у Вас не выходит расположить их в форме квадрата.
# Вместо этого они выстраиваются в обыкновенный прямоугольник! Чёрт возьми!
# Если бы у Вас только был способ узнать, не напрасно ли Вы сейчас работает...
# Минутку! Вот оно! Вам лишь нужно проверить, когда число строительных блоков образует идеальный квадрат!

# На выход даётся целое число. Определите является ли оно квадратом.


def is_square(n):
    # Если целое число не отрицательное
    if n >= 0:
        # Проверим, совпадает ли его квадратный корень, приведённый к целочисленному типу с вещественным корнем.
        return int(n ** (1 / 2)) == (n ** (1 / 2))
    # А если отрицательное, то сразу вернём False
    else:
        return False


# Другие гениальные решения:
# import math                                  - без библиотеки я хотел попробовать сознательно
# def is_square(n):
#     return n > -1 and math.sqrt(n) % 1 == 0; - а вот такая проверка на целочисленность кажется изящнее
# def is_square(n):
#     if n>=0:
#         if int(n**.5)**2 == n:               - тоже любопытный способ
#             return True
#     return False                             - не делать вторую проверку тоже красиво, но экономия минимальная
# from math import sqrt
#
# def is_square(n):
#     return n>=0 and sqrt(n).is_integer()     - тоже вариант, кстати говоря
# def is_square(n):
#     return str(n**(1.0/2.0))[-1] == '0'      - тоже интересно.